<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>gov.samhsa.c2s</groupId>
    <artifactId>pp-ui</artifactId>
    <version>0.24.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>ppui</name>
    <description>Patient Portal UI</description>
    <url>${project.scm.url}</url>

    <developers>
        <developer>
            <id>BHITS Team</id>
            <name>BHITS Team</name>
            <organization>FEi Systems</organization>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>See license in LICENSE.md</name>
            <url>${project.scm.url}/blob/master/LICENSE.md</url>
        </license>
    </licenses>

    <ciManagement>
        <system>Jenkins</system>
        <url>http://BhitsBuild03/</url>
    </ciManagement>

    <scm>
        <url>https://github.com/bhits/patient-portal-ui</url>
        <connection>scm:git:${project.scm.url}.git</connection>
        <developerConnection>scm:git:${project.scm.url}.git</developerConnection>
    </scm>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.2.RELEASE</version>
        <relativePath/><!-- lookup parent from repository -->
    </parent>

    <!-- Full Build: mvn clean install -->
    <!-- Full Build & Run: mvn spring-boot:run -Drun.arguments=-\-server.port=8081,-\-server.contextPath=/pp-ui (remove backslashes) -->
    <!-- Package & Run: mvn spring-boot:run -PskipGrunt -Drun.arguments=-\-server.port=8081,-\-server.contextPath=/pp-ui (remove backslashes) -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <start-class>gov.samhsa.c2s.ppui.PPUIApplication</start-class>
        <skip.grunt.build>false</skip.grunt.build>
        <java.version>1.8</java.version>
        <spring.cloud.version>Camden.SR2</spring.cloud.version>
        <node.version>4.4.7</node.version>
        <npm.version>2.15.8</npm.version>
        <maven-resources-plugin.version>2.7</maven-resources-plugin.version>
        <maven-war-plugin.version>2.6</maven-war-plugin.version>
        <frontend-maven-plugin.version>1.0</frontend-maven-plugin.version>
        <docker.maven.version>0.4.3</docker.maven.version>
        <lombok.version>1.16.10</lombok.version>
    </properties>

    <repositories>
        <repository>
            <id>repo.spring.io</id>
            <name>Spring Milestone Repository</name>
            <url>https://repo.spring.io/libs-milestone-local</url>
        </repository>
    </repositories>

    <profiles>
        <profile>
            <id>skipGrunt</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <skip.grunt.build>true</skip.grunt.build>
            </properties>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-oauth2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <configuration>
                    <dotGitDirectory>${project.basedir}/../.git</dotGitDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.version}</version>
                <configuration>
                    <imageName>bhits/${project.artifactId}</imageName>
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <buildArgs>
                        <finalName>${project.build.finalName}.jar</finalName>
                    </buildArgs>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>${frontend-maven-plugin.version}</version>

                <!-- optional -->
                <configuration>
                    <skip>${skip.grunt.build}</skip>
                    <workingDirectory>${basedir}/../client/</workingDirectory>
                </configuration>

                <executions>
                    <execution>
                        <!-- optional: you don't really need execution ids, but it looks nice
                            in your build log. -->
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <!-- optional: default phase is "generate-resources" -->
                        <phase>generate-resources</phase>
                        <configuration>
                            <nodeVersion>v${node.version}</nodeVersion>
                            <npmVersion>${npm.version}</npmVersion>
                            <!-- optional: where to download node and npm from. Defaults to http://nodejs.org/dist/ -->
                            <!-- <downloadRoot>http://nodejs.org/dist/</downloadRoot> -->
                            <!-- You can also specify separate download roots for npm and node
                                as they are now stored in separate repos -->
                            <nodeDownloadRoot>http://nodejs.org/dist/</nodeDownloadRoot>
                            <npmDownloadRoot>https://registry.npmjs.org/npm/-/</npmDownloadRoot>
                        </configuration>
                    </execution>

                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>

                        <!-- optional: default phase is "generate-resources" -->
                        <phase>generate-resources</phase>

                        <configuration>
                            <!-- optional: The default argument is actually "install", so unless
                                you need to run some other npm command, you can remove this whole <configuration>
                                section. -->
                            <arguments>install</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>grunt build</id>
                        <goals>
                            <goal>grunt</goal>
                        </goals>

                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>generate-resources</phase>

                        <configuration>
                            <!-- srcdir (optional, for M2Eclipse integration) - a directory to check for changed files before executing in an incremental build -->
                            <!-- The changed file checking only occurs during an incremental build when using M2Eclipse. In any other environment those options are ignored and builds are always run. -->
                            <srcdir>${basedir}/../client</srcdir>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- here the phase you need -->
                        <!-- process-resources phase is after generate-resources -->
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes/static</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../client/target/debug</directory>
                                    <!-- <filtering>true</filtering> -->
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <configuration>
                    <packagingExcludes>WEB-INF/classes/static/karma.conf.js</packagingExcludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>